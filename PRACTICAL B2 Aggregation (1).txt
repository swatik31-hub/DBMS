ubuntu@ubuntu-OptiPlex-3090:~$ mongod --version
db version v8.0.11
Build Info: {
    "version": "8.0.11",
    "gitVersion": "bed99f699da6cb2b74262aa6d473446c41476643",
    "openSSLVersion": "OpenSSL 3.0.13 30 Jan 2024",
    "modules": [],
    "allocator": "tcmalloc-google",
    "environment": {
        "distmod": "ubuntu2404",
        "distarch": "x86_64",
        "target_arch": "x86_64"
    }
}
ubuntu@ubuntu-OptiPlex-3090:~$ mongosh
Current Mongosh Log ID:	689ac1f300e6ce3b1632a03b
Connecting to:		mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.5.5
Using MongoDB:		8.0.11
Using Mongosh:		2.5.5

For mongosh info see: https://www.mongodb.com/docs/mongodb-shell/

------
   The server generated these startup warnings when booting
   2025-08-12T08:45:58.851+05:30: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem
   2025-08-12T08:45:59.401+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
   2025-08-12T08:45:59.401+05:30: For customers running the current memory allocator, we suggest changing the contents of the following sysfsFile
   2025-08-12T08:45:59.401+05:30: For customers running the current memory allocator, we suggest changing the contents of the following sysfsFile
   2025-08-12T08:45:59.401+05:30: We suggest setting the contents of sysfsFile to 0.
   2025-08-12T08:45:59.401+05:30: We suggest setting swappiness to 0 or 1, as swapping can cause performance problems.
------

test> use testdb;
switched to db testdb

testdb> db.orders.insertMany([
...   {
...     _id: 1,
...     product: "Laptop",
...     category: "Electronics",
...     price: 3000,
...     quantity: 2,
...     orderDate: ISODate("2025-08-01")
...   },
...   {
...     _id: 2,
...     product: "Phone",
...     category: "Electronics",
...     price: 1200,
...     quantity: 3,
...     orderDate: ISODate("2025-08-03")
...   },
...   {
...     _id: 3,
...     product: "Chair",
...     category: "Furniture",
...     price: 700,
...     quantity: 4,
...     orderDate: ISODate("2025-08-03")
...   },
...   {
...     _id: 4,
...     product: "Laptop",
...     category: "Electronics",
...     price: 3000,
...     quantity: 1,
...     orderDate: ISODate("2025-08-07")  // <-- fixed here
...   },
...   {
...     _id: 5,
...     product: "Table",
... category: "Furniture",
...     price: 300,
...     quantity: 1,
...     orderDate: ISODate("2025-08-05")  // <-- fixed here
...   }
... ])
{
  acknowledged: true,
  insertedIds: { '0': 1, '1': 2, '2': 3, '3': 4, '4': 5 }
}
testdb> db.orders.aggregate([
...   {
...     $project: {
...       product: 1,
...       totalSale: { $multiply: ["$price", "$quantity"] }
...     }
...   },
...   {
...     $group: {
...       _id: "$product",
...       totalSales: { $sum: "$totalSale" }
...     }
...   },
...   {
...     $sort: { totalSales: -1 }
...   }
... ])
... 
[
  { _id: 'Laptop', totalSales: 9000 },
  { _id: 'Phone', totalSales: 3600 },
  { _id: 'Chair', totalSales: 2800 },
  { _id: 'Table', totalSales: 300 }
]
testdb> db.orders.aggregate([
...   {
...     $project: {
...       orderDate: 1,
...       totalSale: { $multiply: ["$price", "$quantity"] }
...     }
...   },
...   {
...     $group: {
...       _id: "$orderDate",
...       dailySales: { $sum: "$totalSale" }
...     }
...   },
...   {
...     $sort: { _id: 1 }
...   }
... ])
... 
[
  { _id: ISODate('2025-08-01T00:00:00.000Z'), dailySales: 6000 },
  { _id: ISODate('2025-08-03T00:00:00.000Z'), dailySales: 6400 },
  { _id: ISODate('2025-08-05T00:00:00.000Z'), dailySales: 300 },
  { _id: ISODate('2025-08-07T00:00:00.000Z'), dailySales: 3000 }
]
testdb> db.orders.createIndex({ product: 1 })
... 
product_1
testdb> db.orders.createIndex({ product: 1 })
... db.orders.createIndex({ product: 2 })
product_2
testdb> db.orders.createIndex({ product: 2 })
product_2
testdb> db.orders.find({ product: "Laptop" })
... 
[
  {
    _id: 1,
    product: 'Laptop',
    category: 'Electronics',
    price: 3000,
    quantity: 2,
    orderDate: ISODate('2025-08-01T00:00:00.000Z')
  },
  {
    _id: 4,
    product: 'Laptop',
    category: 'Electronics',
    price: 3000,
    quantity: 1,
    orderDate: ISODate('2025-08-07T00:00:00.000Z')
  }
]
testdb> db.orders.createIndex({ orderDate: 1, category: 1 })
... 
orderDate_1_category_1
testdb> db.orders.find({ orderDate: ISODate("2025-08-03"), category: "Electronics" })
... 
[
  {
    _id: 2,
    product: 'Phone',
    category: 'Electronics',
    price: 1200,
    quantity: 3,
    orderDate: ISODate('2025-08-03T00:00:00.000Z')
  }
]
testdb> db.orders.find({ product: "Laptop" }).explain("executionStats")
... 
{
  explainVersion: '1',
  queryPlanner: {
    namespace: 'testdb.orders',
    parsedQuery: { product: { '$eq': 'Laptop' } },
    indexFilterSet: false,
    queryHash: 'DDA52389',
    planCacheShapeHash: 'DDA52389',
    planCacheKey: '31CE1FAB',
    optimizationTimeMillis: 0,
    maxIndexedOrSolutionsReached: false,
    maxIndexedAndSolutionsReached: false,
    maxScansToExplodeReached: false,
    prunedSimilarIndexes: false,
    winningPlan: {
      isCached: false,
      stage: 'FETCH',
      inputStage: {
        stage: 'IXSCAN',
        keyPattern: { product: 1 },
        indexName: 'product_1',
        isMultiKey: false,
        multiKeyPaths: { product: [] },
        isUnique: false,
        isSparse: false,
        isPartial: false,
        indexVersion: 2,
        direction: 'forward',
        indexBounds: { product: [ '["Laptop", "Laptop"]' ] }
      }
    },
    rejectedPlans: [
      {
        isCached: false,
        stage: 'FETCH',
        inputStage: {
          stage: 'IXSCAN',
          keyPattern: { product: 2 },
          indexName: 'product_2',
          isMultiKey: false,
          multiKeyPaths: { product: [] },
          isUnique: false,
          isSparse: false,
          isPartial: false,
          indexVersion: 2,
          direction: 'forward',
          indexBounds: { product: [ '["Laptop", "Laptop"]' ] }
        }
      }
    ]
  },
  executionStats: {
    executionSuccess: true,
    nReturned: 2,
    executionTimeMillis: 0,
    totalKeysExamined: 2,
    totalDocsExamined: 2,
    executionStages: {
      isCached: false,
      stage: 'FETCH',
      nReturned: 2,
      executionTimeMillisEstimate: 0,
      works: 4,
      advanced: 2,
      needTime: 0,
      needYield: 0,
      saveState: 0,
      restoreState: 0,
      isEOF: 1,
      docsExamined: 2,
      alreadyHasObj: 0,
      inputStage: {
        stage: 'IXSCAN',
        nReturned: 2,
        executionTimeMillisEstimate: 0,
        works: 3,
        advanced: 2,
        needTime: 0,
        needYield: 0,
        saveState: 0,
        restoreState: 0,
        isEOF: 1,
        keyPattern: { product: 1 },
        indexName: 'product_1',
        isMultiKey: false,
        multiKeyPaths: { product: [] },
        isUnique: false,
        isSparse: false,
        isPartial: false,
        indexVersion: 2,
        direction: 'forward',
        indexBounds: { product: [ '["Laptop", "Laptop"]' ] },
        keysExamined: 2,
        seeks: 1,
        dupsTested: 0,
        dupsDropped: 0
      }
    }
  },
  queryShapeHash: '56B38C47F13092183A623C62AE0DA0E59BF3D5839A3D2D4EA74254F74EE1CBC2',
  command: { find: 'orders', filter: { product: 'Laptop' }, '$db': 'testdb' },
  serverInfo: {
    host: 'ubuntu-OptiPlex-3090',
    port: 27017,
    version: '8.0.11',
    gitVersion: 'bed99f699da6cb2b74262aa6d473446c41476643'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
    internalQueryFrameworkControl: 'trySbeRestricted',
    internalQueryPlannerIgnoreIndexWithCollationForRegex: 1
  },
  ok: 1
}
testdb> 


